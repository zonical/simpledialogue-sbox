@using Sandbox;
@using Sandbox.UI;
@using System;
@using System.Collections.Generic;

@inherits PanelComponent
@namespace SimpleDialogue

<root>
	<SimpleDialoguePanel
	@ref="DialoguePanel"
	@PrintStyle=@PrintStyle
	@DialogueStrings=@Dialogue
	@CharacterDelay=@TimeDelayPerCharacter
	@WaitForTextCompletion=@WaitForCompletion
	@CloseOnCompletion=@CloseOnCompletion
	@AdvanceCharacterKey=@AdvanceCharacterKey
	@SpeedUpKey=@SpeedUpKey
	@DelayAmountRemoved=@DelayAmountRemoved
	</SimpleDialoguePanel>
</root>

@code
{
	SimpleDialoguePanel DialoguePanel;

	// ==========================================================

	[Property, Feature("Dialogue"), TextArea]
	public List<string> Dialogue { get; set; } = new();

	[Property, Feature("Dialogue")] 
	public DialoguePrintStyle PrintStyle { get; set; }

	[Property, Feature("Dialogue"), 
	ShowIf("PrintStyle", DialoguePrintStyle.CharacterByCharacter)] 
	public float TimeDelayPerCharacter { get; set; } = 0.1f;

	// ==========================================================

	[Property, FeatureEnabled("Style")]
	public bool OverrideStyleSheet { get; set; } = false;

	[Property, Feature("Style")]
	public DialoguePanelStyle Style { get; set; }


	// ==========================================================

	[Property, Feature("Input"), Header("Advancing Dialogue")]
	public string AdvanceCharacterKey { get; set; } = "enter";

	[Property, Feature("Input"), ShowIf("PrintStyle", DialoguePrintStyle.CharacterByCharacter),
	Description("Whether or not we need to wait for the dialogue to be completed before being able to advance.")] 
	public bool WaitForCompletion { get; set; } = true;

	[Property, Feature("Input"),
	Description("Close the panel when all of the dialogue has been displayed and the user presses the advance key.")]
	public bool CloseOnCompletion { get; set; } = true;

	[Property, Feature("Input"), Header("Speed Up Dialogue"),
	ShowIf("PrintStyle", DialoguePrintStyle.CharacterByCharacter)]
	public string? SpeedUpKey { get; set; }

	[Property, Feature("Input"),
	ShowIf("PrintStyle", DialoguePrintStyle.CharacterByCharacter),
	Description("How much delay is removed from TimeDelayPerCharacter when we speed up the text.")]
	public float DelayAmountRemoved { get; set; }

	[Property, FeatureEnabled("Sound")]
	public bool UsesSounds { get; set; } = false;

	[Property, Feature("Sound")]
	public List<SoundFile> Sounds = new();

	// ==========================================================

	[Property, FeatureEnabled("ActionGraph")]
	public bool UsesActionGraph { get; set; } = false;

	[Property, Feature("ActionGraph"),
	Title("On Character Printed"), Description("Fires each time a valid character is printed (not control codes).")]
	public IDialoguePanel.OnCharacterPrinted OnCharacterPrintedAction { get; set; }

	[Property, Feature("ActionGraph"),
	Title("On Control Code Hit"), Description("Fires each time a control code is hit.")]
	public IDialoguePanel.OnControlCodeHit OnControlCodeHitAction { get; set; }

	[Property, Feature("ActionGraph"),
	Title("On All Characters Printed"), Description("Fires each time a dialogue string is fully printed.")]
	public IDialoguePanel.OnAllCharactersPrinted OnAllCharactersPrintedAction { get; set; }

	[Property, Feature("ActionGraph"),
	Title("On All Dialogue Displayed"), Description("Fires when all of the dialogue has been displayed.")]
	public IDialoguePanel.OnAllDialogueDisplayed OnAllDialogueDisplayedAction { get; set; }


	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() => System.HashCode.Combine(Dialogue, DialoguePanel?.DisplayedDialogue);


	protected override void OnTreeFirstBuilt()
	{
		base.OnTreeFirstBuilt();
		Log.Info("Building SimpleDialoguePanelComponent");

		if (DialoguePanel is null) return;

		if ( OverrideStyleSheet && Style is not null )
		{
			Style.BuildStyle(Panel, DialoguePanel);
		}


		PushSounds();
		PushActionGraphFunctions();
	}


	private void PushSounds()
	{
		DialoguePanel.Sounds = Sounds;
	}

	private void PushActionGraphFunctions()
	{
		DialoguePanel.OnCharacterPrintedAction += OnCharacterPrintedAction;
		DialoguePanel.OnControlCodeHitAction += OnControlCodeHitAction;
		DialoguePanel.OnAllCharactersPrintedAction += OnAllCharactersPrintedAction;
		DialoguePanel.OnAllDialogueDisplayedAction += OnAllDialogueDisplayedAction;
	}

}
